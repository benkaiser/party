#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('party:server');
var https = require('https');
var http = require('http');
const fs = require('fs');
const path = require('path');

let serverCreater = http.createServer;
if (process.env.MODE === 'development') {
  const options = {
    pfx: fs.readFileSync(path.join(__dirname, '..', 'cert', 'party.pfx')),
    passphrase: 'party'
  };

  serverCreater = https.createServer.bind(this, options);
}


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const musicTrack = {
  id: '5Di20x6vVVU',
  startTime: (+new Date())
};
const rooms = {};

function roomName(name) {
  return 'room_' + name;
}

var server = serverCreater(app);
var io = require('socket.io')(server);
io.on('connection', (socket) => {
  console.log('a user connected');
  socket.on('disconnect', () => {
    console.log('user disconnected');
    if (socket && socket.info && socket.info.room) {
      socket.to(roomName(socket.info.room)).emit('leaver', socket.info);
    }
    socket.leaveAll();
  });
  socket.on('join', function(joinObj){
    const joinedRoom = roomName(joinObj.room);
    console.log('joined room (' + joinedRoom + '): ' + joinObj.name);
    socket.join(joinedRoom);
    socket.info = joinObj;
    socket.to(joinedRoom).emit('joiner', joinObj);
    if (rooms[joinedRoom] === undefined) {
      rooms[joinedRoom] = {
        music: musicTrack
      };
    }

    // inform the client of all the other sockets in the room
    io.of('/').in(joinedRoom).clients(function(error, clients){
      clients.forEach((id) => {
        const otherSocket = io.sockets.connected[id]
        if (socket !== otherSocket) {
          socket.emit('joiner', otherSocket.info);
        }
      });
    });

    socket.emit('music', rooms[joinedRoom].music);
  });

  socket.on('updateInfo', function(updatedInfo) {
    socket.info = updatedInfo;
    socket.to(roomName(socket.info.room)).emit('updateInfo', updatedInfo);
  });

  socket.on('setMusic', (id) => {
    const room = roomName(socket.info.room);
    console.log('Updating music for room: ' + room);
    rooms[room].music = {
      id: id,
      startTime: (+new Date())
    };
    io.in(room).emit('music', rooms[room].music);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}